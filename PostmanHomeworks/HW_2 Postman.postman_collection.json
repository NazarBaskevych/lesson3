{
	"info": {
		"_postman_id": "e0d959eb-01c7-4e43-86ff-070f992f01a4",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3 Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches the right string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Vadim ne napisal kakoy dolzhen bit' string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first?name=Nazar&age=18&salary=10000",
					"host": [
						"{{url}}first"
					],
					"query": [
						{
							"key": "name",
							"value": "Nazar"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2 Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3 Спарсить response body в json.\r",
							"var jsondata = pm.response.json();\r",
							"// 4 Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Test name\", function () {\r",
							"    pm.expect(jsondata.name).to.eql(\"Nazar\");\r",
							"});\r",
							"// 5  Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Test age\", function () {\r",
							"    pm.expect(jsondata.age).to.eql(\"18\");\r",
							"});\r",
							"// 6 Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test salary\", function () {\r",
							"    pm.expect(jsondata.salary).to.eql(10000);\r",
							"});\r",
							"// 7 Спарсить request.\r",
							"var reqdata = request.data;\r",
							"// 8 Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test request name\", function () {\r",
							"    pm.expect(jsondata.name).to.eql(reqdata.name);\r",
							"});\r",
							"// 10 Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Test request salary\", function () {\r",
							"    pm.expect(jsondata.salary).to.eql(+reqdata.salary);\r",
							"});\r",
							"// 9 Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Test request age\", function () {\r",
							"    pm.expect(jsondata.age).to.eql(reqdata.age);\r",
							"});\r",
							"// 11 Вывести в консоль параметр family из response.\r",
							"console.log(jsondata.family);\r",
							"// 12 Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var salary_na_4 = +reqdata.salary*4;\r",
							"console.log(\"Проверка, что всё перемножилось правильно, оно равно \"+ salary_na_4);\r",
							"    pm.test(\"u_salary_1_5_year*4\", function(){\r",
							"        pm.expect(jsondata.family.u_salary_1_5_year).to.eql(salary_na_4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json. 4. Спарсить request.\r",
							"var resp_json = pm.response.json();\r",
							"var req_data = request.data;\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from resp = name from req\", function(){\r",
							"    pm.expect(resp_json.name).to.eql(pm.request.url.query.get(\"name\"));\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from resp = age from req\", function(){\r",
							"    pm.expect(+resp_json.age).to.eql(+pm.request.url.query.get(\"age\"));\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from resp = salary from req\", function(){\r",
							"    pm.expect(resp_json.salary).to.eql(+pm.request.url.query.get(\"salary\"));\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp_json.family);\r",
							"var doog = resp_json.family.pets.dog;\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"The dog has a name\", function () {\r",
							"    pm.expect(doog.hasOwnProperty(\"name\")).to.eql(true);\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"The dog has an age\", function () {\r",
							"    pm.expect(doog.hasOwnProperty(\"age\")).to.eql(true);\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog has the right name\", function(){\r",
							"    pm.expect(doog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog has the right age\", function(){\r",
							"    pm.expect(doog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Nazar&age=18&salary=10000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nazar"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json. 4. Спарсить request.\r",
							"var resp = pm.response.json();\r",
							"var req = request.data;\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name is correct\", function(){\r",
							"    pm.expect(resp.name).to.eql(pm.request.url.query.get(\"name\"));\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age is correct\", function(){\r",
							"    pm.expect(resp.age).to.eql(+pm.request.url.query.get(\"age\"));\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"var req_salary = pm.request.url.query.get(\"salary\");\r",
							"var req_salary_2 = req_salary*2;\r",
							"var req_salary_3 = req_salary*3;\r",
							"console.log(\"Request salary = \"+ req_salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Response salary = \"+ resp.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Response salary 0 element= \"+ resp.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Response salary 1st element = \"+ resp.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Response salary 2nd element = \"+ resp.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check that 0 element = salary from request\", function(){\r",
							"    pm.expect(+resp.salary[0]).to.eql(+req_salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check that 1st element = salary from request*2\", function(){\r",
							"    pm.expect(+resp.salary[1]).to.eql(req_salary_2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check that 2st element = salary from request*2\", function(){\r",
							"    pm.expect(+resp.salary[2]).to.eql(req_salary_3);\r",
							"});\r",
							"// 15-17(Создать в окружении переменную name, age, salary)18-20(Передать в окружение переменную name, age, salary)\r",
							"pm.environment.set(\"name\", pm.request.url.query.get(\"name\"));\r",
							"pm.environment.set(\"age\", +pm.request.url.query.get(\"age\"));\r",
							"pm.environment.set(\"salary\", +pm.request.url.query.get(\"salary\"));\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var arr = resp.salary;\r",
							"console.log(arr)\r",
							"for (var i = 0; i <=arr.length-1; i++){\r",
							"    console.log(\"Vot ono \"+ arr[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Nazar&age=18&salary=10000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nazar"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1,2,3 вставил в body form data\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json. 7. Спарсить request.\r",
							"var respjson = pm.response.json();\r",
							"var reqdata = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Has the parameter start_qa_salary\", function () {\r",
							"    pm.expect(respjson.hasOwnProperty(\"start_qa_salary\")).to.eql(true);\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Has the parameter qa_salary_after_6_months\", function () {\r",
							"    pm.expect(respjson.hasOwnProperty(\"qa_salary_after_6_months\")).to.eql(true);\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Has the parameter qa_salary_after_12_months\", function () {\r",
							"    pm.expect(respjson.hasOwnProperty(\"qa_salary_after_12_months\")).to.eql(true);\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Has the parameter qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(respjson.hasOwnProperty(\"qa_salary_after_1.5_year\")).to.eql(true);\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Has the parameter qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(respjson.hasOwnProperty(\"qa_salary_after_3.5_years\")).to.eql(true);\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Has the parameter person  \", function () {\r",
							"    pm.expect(respjson.hasOwnProperty(\"person\")).to.eql(true);\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary = salary from request\", function(){\r",
							"    pm.expect(respjson.start_qa_salary).to.eql(+reqdata.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 from request\", function(){\r",
							"    pm.expect(respjson.qa_salary_after_6_months).to.eql(+reqdata.salary*2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 from request\", function(){\r",
							"    pm.expect(respjson.qa_salary_after_12_months).to.eql(+reqdata.salary*2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 from request\", function(){\r",
							"    pm.expect(respjson[\"qa_salary_after_1.5_year\"]).to.eql(+reqdata.salary*3.3)\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3 from request\", function(){\r",
							"    pm.expect(respjson[\"qa_salary_after_3.5_years\"]).to.eql(+reqdata.salary*3.8)\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check that in person -> u_name 1st parameter = salary from request\",function(){\r",
							"    pm.expect(respjson.person.u_name[1]).to.eql(+reqdata.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = age from request\", function(){\r",
							"    pm.expect(respjson.person.u_age).to.eql(+reqdata.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = salary*4.2 from request\", function(){\r",
							"    pm.expect(respjson.person.u_salary_5_years).to.eql(+reqdata.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var arrr = respjson.person;\r",
							"console.log(arrr)\r",
							"for (var i = 0; i <= arrr.length-1; i++){\r",
							"    console.log(arrr[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
