HW_2 Postman

http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.

// 2 Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3 Проверить, что в body приходит правильный string.
pm.test("Body matches the right string", function () {
    pm.expect(pm.response.text()).to.include("Vadim ne napisal kakoy dolzhen bit' string");
});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

// 2 Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3 Спарсить response body в json.
var jsondata = pm.response.json();
// 4 Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Test name", function () {
    pm.expect(jsondata.name).to.eql("Nazar");
});
// 5  Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Test age", function () {
    pm.expect(jsondata.age).to.eql("18");
});
// 6 Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Test salary", function () {
    pm.expect(jsondata.salary).to.eql(10000);
});
// 7 Спарсить request.
var reqdata = request.data;
// 8 Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Test request name", function () {
    pm.expect(jsondata.name).to.eql(reqdata.name);
});
// 10 Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Test request salary", function () {
    pm.expect(jsondata.salary).to.eql(+reqdata.salary);
});
// 9 Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Test request age", function () {
    pm.expect(jsondata.age).to.eql(reqdata.age);
});
// 11 Вывести в консоль параметр family из response.
console.log(jsondata.family);
// 12 Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
var salary_na_4 = +reqdata.salary*4;
console.log("Проверка, что всё перемножилось правильно, оно равно "+ salary_na_4);
    pm.test("u_salary_1_5_year*4", function(){
        pm.expect(jsondata.family.u_salary_1_5_year).to.eql(salary_na_4);
});


http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
11. Проверить, что параметр name имеет значение Luky.
12. Проверить, что параметр age имеет значение 4.

// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3. Спарсить response body в json. 4. Спарсить request.
var resp_json = pm.response.json();
var req_data = request.data;
// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Name from resp = name from req", function(){
    pm.expect(resp_json.name).to.eql(pm.request.url.query.get("name"));
});
// 6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Age from resp = age from req", function(){
    pm.expect(+resp_json.age).to.eql(+pm.request.url.query.get("age"));
});
// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Salary from resp = salary from req", function(){
    pm.expect(resp_json.salary).to.eql(+pm.request.url.query.get("salary"));
});
// 8. Вывести в консоль параметр family из response.
console.log(resp_json.family);
var doog = resp_json.family.pets.dog;
// 9. Проверить, что у параметра dog есть параметры name.
pm.test("The dog has a name", function () {
    pm.expect(doog.hasOwnProperty("name")).to.eql(true);
});
// 10. Проверить, что у параметра dog есть параметры age.
pm.test("The dog has an age", function () {
    pm.expect(doog.hasOwnProperty("age")).to.eql(true);
});
// 11. Проверить, что параметр name имеет значение Luky.
pm.test("Dog has the right name", function(){
    pm.expect(doog.name).to.eql("Luky");
});
// 12. Проверить, что параметр age имеет значение 4.
pm.test("Dog has the right age", function(){
    pm.expect(doog.age).to.eql(4);
});

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

pm.sendRequest("https://postman-echo.com/get", function (err, response) {
    console.log(response.json());
});
// 2. Статус код 200
pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
});
// 3. Спарсить response body в json. 4. Спарсить request.
var resp = pm.response.json();
var req = request.data;
// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Name is correct", function(){
    pm.expect(resp.name).to.eql(pm.request.url.query.get("name"));
});
// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Age is correct", function(){
    pm.expect(resp.age).to.eql(+pm.request.url.query.get("age"));
});
// 7. Вывести в консоль параметр salary из request.
var req_salary = pm.request.url.query.get("salary");
var req_salary_2 = req_salary*2;
var req_salary_3 = req_salary*3;
console.log("Request salary = "+ req_salary);
// 8. Вывести в консоль параметр salary из response.
console.log("Response salary = "+ resp.salary);
// 9. Вывести в консоль 0-й элемент параметра salary из response.
console.log("Response salary 0 element= "+ resp.salary[0]);
// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log("Response salary 1st element = "+ resp.salary[1]);
// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log("Response salary 2nd element = "+ resp.salary[2]);
// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Check that 0 element = salary from request", function(){
    pm.expect(+resp.salary[0]).to.eql(+req_salary);
});
// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Check that 1st element = salary from request*2", function(){
    pm.expect(+resp.salary[1]).to.eql(req_salary_2);
});
// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Check that 2st element = salary from request*2", function(){
    pm.expect(+resp.salary[2]).to.eql(req_salary_3);
});
// 15-17(Создать в окружении переменную name, age, salary)18-20(Передать в окружение переменную name, age, salary)
pm.environment.set("name", pm.request.url.query.get("name"));
pm.environment.set("age", +pm.request.url.query.get("age"));
pm.environment.set("salary", +pm.request.url.query.get("salary"));
// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
var arr = resp.salary;
console.log(arr)
for (var i = 0; i <=arr.length-1; i++){
    console.log("Vot ono "+ arr[i]);
};


http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр age из окружения в age
3. Вставить параметр name из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

// 1,2,3 вставил в body form data
// 5. Статус код 200
pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
});
// 6. Спарсить response body в json. 7. Спарсить request.
var respjson = pm.response.json();
var reqdata = request.data;
// 8. Проверить, что json response имеет параметр start_qa_salary
pm.test("Has the parameter start_qa_salary", function () {
    pm.expect(respjson.hasOwnProperty("start_qa_salary")).to.eql(true);
});
// 9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Has the parameter qa_salary_after_6_months", function () {
    pm.expect(respjson.hasOwnProperty("qa_salary_after_6_months")).to.eql(true);
});
// 10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Has the parameter qa_salary_after_12_months", function () {
    pm.expect(respjson.hasOwnProperty("qa_salary_after_12_months")).to.eql(true);
});
// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Has the parameter qa_salary_after_1.5_year", function () {
    pm.expect(respjson.hasOwnProperty("qa_salary_after_1.5_year")).to.eql(true);
});
// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Has the parameter qa_salary_after_3.5_years", function () {
    pm.expect(respjson.hasOwnProperty("qa_salary_after_3.5_years")).to.eql(true);
});
// 13. Проверить, что json response имеет параметр person
pm.test("Has the parameter person  ", function () {
    pm.expect(respjson.hasOwnProperty("person")).to.eql(true);
});
// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("start_qa_salary = salary from request", function(){
    pm.expect(respjson.start_qa_salary).to.eql(+reqdata.salary)
});
// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("qa_salary_after_6_months = salary*2 from request", function(){
    pm.expect(respjson.qa_salary_after_6_months).to.eql(+reqdata.salary*2)
});
// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("qa_salary_after_12_months = salary*2.7 from request", function(){
    pm.expect(respjson.qa_salary_after_12_months).to.eql(+reqdata.salary*2.7)
});
// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("qa_salary_after_1.5_year = salary*3.3 from request", function(){
    pm.expect(respjson["qa_salary_after_1.5_year"]).to.eql(+reqdata.salary*3.3)
});
// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("qa_salary_after_1.5_year = salary*3.3 from request", function(){
    pm.expect(respjson["qa_salary_after_3.5_years"]).to.eql(+reqdata.salary*3.8)
});
// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("Check that in person -> u_name 1st parameter = salary from request",function(){
    pm.expect(respjson.person.u_name[1]).to.eql(+reqdata.salary);
});
// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("u_age = age from request", function(){
    pm.expect(respjson.person.u_age).to.eql(+reqdata.age);
});
// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("u_salary_5_years = salary*4.2 from request", function(){
    pm.expect(respjson.person.u_salary_5_years).to.eql(+reqdata.salary*4.2);
});
// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
var arrr = respjson.person;
console.log(arrr)
for (var i = 0; i <= arrr.length-1; i++){
    console.log(arrr[i]);
};
