ДЗ_2 Postman
=====

=====

1) необходимо залогиниться
POST
http://162.55.220.72:5005/login
login : str (кроме /)
password : str

Приходящий токен необходимо передать во все остальные запросы.

===================
дальше все запросы требуют наличие токена.
===================

2) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user
===================
ЭТО Я ПРОПУСТИЛ!!!

3) http://162.55.220.72:5005/new_data
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
4) проверить, что 2-й элемент массива salary больше 1-го и 0-го
pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
});
var jsonData = pm.response.json();
var schema = {
    "items": {
        "type": "boolean"
    }
};

var data1 = [true, false];

pm.test('Schema is valid', function () {
    pm.expect(tv4.validate(data1, schema)).to.be.true;
});

// 3) [salary, str(salary*2), str(salary*3)]}
var salary = +request.data.salary;
var salary_2 = salary*2;
var salary_3 = salary*3;
pm.test("right coefficient", function(){
    pm.expect(jsonData.salary["0"]).to.eql(salary)
});
pm.test("right coefficient (2)", function(){
    pm.expect(+jsonData.salary["1"]).to.eql(salary_2)
});pm.test("right coefficient (3)", function(){
    pm.expect(+jsonData.salary["2"]).to.eql(salary_3)
});

//4 ) проверить, что 2-й элемент массива salary больше 1-го и 0-го
if(jsonData.salary["2"]>jsonData.salary["0"]){
    console.log("VSE HOROSHO! the 2nd element > than 0 one");
}
else{
console.log("VSE PLOHO! the 2nd element < than 0 one");
}
if(jsonData.salary["2"]>jsonData.salary["0"]){
    console.log("VSE HOROSHO! the 2nd element > than 1st");
}
else{
console.log("VSE PLOHO! the 2nd element < than 1st ");
}
===================

4) http://162.55.220.72:5005/test_pet_info
req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.
// 1) Status code 200
pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
});
//2) Проверка структуры json в ответе.
var schema = {}
var data1 = pm.response.json();
pm.test("Schema is valid", function() {
pm.expect(tv4.validate(data1, schema)).to.be.true;
});
// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.
var jsondata = pm.response.json();
pm.test("Right coefficients weight * 0.012", function(){
    pm.expect(jsondata.daily_food).to.eql(request.data.weight*0.012);
});
pm.test("Right coefficients weight * 2.5", function(){
    pm.expect(jsondata.daily_sleep).to.eql(request.data.weight*2.5);
});

===================

5) http://162.55.220.72:5005/get_test_user
req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) Проверить что занчение поля name = значению переменной name из окружения
4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age
//1
pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
});
// 2
var schema = {}
var data1 = pm.response.json();
pm.test("Schema is valid", function(){
    pm.expect(tv4.validate(data1, schema)).to.be.true;
});
// 3
var jsondata = pm.response.json();
pm.test("name = name from environment", function(){
    pm.expect(jsondata.name).to.eql(pm.environment.get("name"));
});
// 4
pm.test("age from response = age from request", function(){
    pm.expect(jsondata.age).to.eql(request.data.age);
});
===================

6) http://162.55.220.72:5005/currency
req.
POST
auth_token

Resp. Передаётся список массив объектов.
[
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
…
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
]

Тесты:
1) Можете взять любой объект из присланного списка, используйте js random.
В объекте возьмите Cur_ID и передать через окружение в следующий запрос.
var jsondata = pm.response.json();
var kolvo = jsondata.length;
function getrandomInt(kolvo){
    return Math.floor(Math.random()*kolvo)
};
var random_int = getrandomInt(kolvo);
var curr = jsondata[random_int];
pm.environment.set("curr_code", curr.Cur_ID);

 ===================

7) http://162.55.220.72:5005/curr_byn
req.
POST
auth_token
curr_code: int

Resp.
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

var schema = {}
var data1 = pm.response.json();
pm.test("Schema is valid", function(){
    pm.expect(tv4.validate(data1, schema)).to.be.true;
});


===============
*** ( НЕ ДЕЛАЛ)
1) получить список валют
2) итерировать список валют
3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты
4) если возвращается 500 код, переходим к следующей итреации
5) если получаем 200 код, проверяем response json на наличие поля "Cur_OfficialRate"
6) если поле есть, пишем в консоль инфу про фалюту в виде response
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}
7) переходим к следующей итерации